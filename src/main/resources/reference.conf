akka {

  loglevel = DEBUG

  actor {
    provider = cluster
  }

  remote.artery {
    canonical {
      hostname = "127.0.0.1"
      hostname = ${?AKKA_CLUSTER_NODE_HOSTNAME}
      port = 25520
    }
  }

  cluster {
    min-nr-of-members = 3
    shutdown-after-unsuccessful-join-seed-nodes = 60s

    # Split Brain Resolver
    # https://doc.akka.io/docs/akka/current/split-brain-resolver.html
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    split-brain-resolver.active-strategy = keep-majority
  }

  # Coordinated Shutdown
  # https://doc.akka.io/docs/akka/current/coordinated-shutdown.html
  coordinated-shutdown {
    default-phase-timeout = 5s
    exit-jvm = on
    phases.before-service-unbind.timeout = 45s
  }

}

akka.management {

  # Akka Management
  # https://doc.akka.io/docs/akka-management/current/akka-management.html
  http.hostname = "127.0.0.1"
  http.hostname = ${?APP_MANAGEMENT_HOSTNAME}
  http.port = 8558

  # Cluster Bootstrap
  #  - https://doc.akka.io/docs/akka-management/current/bootstrap/index.html
  #  - https://doc.akka.io/docs/akka-management/current/bootstrap/kubernetes-api.html
  cluster.bootstrap {
    contact-point-discovery {
      discovery-method = kubernetes-api
      required-contact-point-nr = 3
    }
  }

}

app {

  # The name of ActorSystem to use
  actor-system-name = "my-app"

}

app.http {

  # The HTTP endpoint (hostname:port) to bind
  hostname = "127.0.0.1"
  hostname = ${?APP_HTTP_HOSTNAME}
  port = 8080

  # The deadline(timeout) to wait for all in-flight HTTP requests completed.
  # After this deadline, this application terminates remaining HTTP requests forcibly.
  # This deadline should be enough more prolonged than the time in which
  # this application processes all in-flight HTTP requests.
  termination-hard-deadline = 3s

}
